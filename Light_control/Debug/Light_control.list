
Light_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001624  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001730  08001730  00011730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001754  08001754  00011754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001758  08001758  00011758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  0800175c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000003c  20000018  08001774  00020018  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000054  08001774  00020054  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006bdf  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000013a6  00000000  00000000  00026c20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008d0  00000000  00000000  00027fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007f8  00000000  00000000  00028898  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002d79  00000000  00000000  00029090  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000261a  00000000  00000000  0002be09  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002e423  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000244c  00000000  00000000  0002e4a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000308ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08001718 	.word	0x08001718

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08001718 	.word	0x08001718

0800014c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800014c:	b480      	push	{r7}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	61fb      	str	r3, [r7, #28]
 800015a:	2300      	movs	r3, #0
 800015c:	613b      	str	r3, [r7, #16]
 800015e:	2300      	movs	r3, #0
 8000160:	61bb      	str	r3, [r7, #24]
 8000162:	2300      	movs	r3, #0
 8000164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000166:	2300      	movs	r3, #0
 8000168:	617b      	str	r3, [r7, #20]
 800016a:	2300      	movs	r3, #0
 800016c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800016e:	683b      	ldr	r3, [r7, #0]
 8000170:	78db      	ldrb	r3, [r3, #3]
 8000172:	f003 030f 	and.w	r3, r3, #15
 8000176:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000178:	683b      	ldr	r3, [r7, #0]
 800017a:	78db      	ldrb	r3, [r3, #3]
 800017c:	f003 0310 	and.w	r3, r3, #16
 8000180:	2b00      	cmp	r3, #0
 8000182:	d005      	beq.n	8000190 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	789b      	ldrb	r3, [r3, #2]
 8000188:	461a      	mov	r2, r3
 800018a:	69fb      	ldr	r3, [r7, #28]
 800018c:	4313      	orrs	r3, r2
 800018e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000190:	683b      	ldr	r3, [r7, #0]
 8000192:	881b      	ldrh	r3, [r3, #0]
 8000194:	b2db      	uxtb	r3, r3
 8000196:	2b00      	cmp	r3, #0
 8000198:	d044      	beq.n	8000224 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80001a0:	2300      	movs	r3, #0
 80001a2:	61bb      	str	r3, [r7, #24]
 80001a4:	e038      	b.n	8000218 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80001a6:	2201      	movs	r2, #1
 80001a8:	69bb      	ldr	r3, [r7, #24]
 80001aa:	fa02 f303 	lsl.w	r3, r2, r3
 80001ae:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	881b      	ldrh	r3, [r3, #0]
 80001b4:	461a      	mov	r2, r3
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	4013      	ands	r3, r2
 80001ba:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80001bc:	693a      	ldr	r2, [r7, #16]
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d126      	bne.n	8000212 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80001c4:	69bb      	ldr	r3, [r7, #24]
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80001ca:	220f      	movs	r2, #15
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	fa02 f303 	lsl.w	r3, r2, r3
 80001d2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	43db      	mvns	r3, r3
 80001d8:	697a      	ldr	r2, [r7, #20]
 80001da:	4013      	ands	r3, r2
 80001dc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80001de:	69fa      	ldr	r2, [r7, #28]
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	fa02 f303 	lsl.w	r3, r2, r3
 80001e6:	697a      	ldr	r2, [r7, #20]
 80001e8:	4313      	orrs	r3, r2
 80001ea:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	78db      	ldrb	r3, [r3, #3]
 80001f0:	2b28      	cmp	r3, #40	; 0x28
 80001f2:	d105      	bne.n	8000200 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80001f4:	2201      	movs	r2, #1
 80001f6:	69bb      	ldr	r3, [r7, #24]
 80001f8:	409a      	lsls	r2, r3
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	615a      	str	r2, [r3, #20]
 80001fe:	e008      	b.n	8000212 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	78db      	ldrb	r3, [r3, #3]
 8000204:	2b48      	cmp	r3, #72	; 0x48
 8000206:	d104      	bne.n	8000212 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000208:	2201      	movs	r2, #1
 800020a:	69bb      	ldr	r3, [r7, #24]
 800020c:	409a      	lsls	r2, r3
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000212:	69bb      	ldr	r3, [r7, #24]
 8000214:	3301      	adds	r3, #1
 8000216:	61bb      	str	r3, [r7, #24]
 8000218:	69bb      	ldr	r3, [r7, #24]
 800021a:	2b07      	cmp	r3, #7
 800021c:	d9c3      	bls.n	80001a6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	697a      	ldr	r2, [r7, #20]
 8000222:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	881b      	ldrh	r3, [r3, #0]
 8000228:	2bff      	cmp	r3, #255	; 0xff
 800022a:	d946      	bls.n	80002ba <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000232:	2300      	movs	r3, #0
 8000234:	61bb      	str	r3, [r7, #24]
 8000236:	e03a      	b.n	80002ae <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000238:	69bb      	ldr	r3, [r7, #24]
 800023a:	3308      	adds	r3, #8
 800023c:	2201      	movs	r2, #1
 800023e:	fa02 f303 	lsl.w	r3, r2, r3
 8000242:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	461a      	mov	r2, r3
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	4013      	ands	r3, r2
 800024e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000250:	693a      	ldr	r2, [r7, #16]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d127      	bne.n	80002a8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000258:	69bb      	ldr	r3, [r7, #24]
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800025e:	220f      	movs	r2, #15
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	fa02 f303 	lsl.w	r3, r2, r3
 8000266:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	43db      	mvns	r3, r3
 800026c:	697a      	ldr	r2, [r7, #20]
 800026e:	4013      	ands	r3, r2
 8000270:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000272:	69fa      	ldr	r2, [r7, #28]
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	697a      	ldr	r2, [r7, #20]
 800027c:	4313      	orrs	r3, r2
 800027e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	78db      	ldrb	r3, [r3, #3]
 8000284:	2b28      	cmp	r3, #40	; 0x28
 8000286:	d105      	bne.n	8000294 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	3308      	adds	r3, #8
 800028c:	2201      	movs	r2, #1
 800028e:	409a      	lsls	r2, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	78db      	ldrb	r3, [r3, #3]
 8000298:	2b48      	cmp	r3, #72	; 0x48
 800029a:	d105      	bne.n	80002a8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800029c:	69bb      	ldr	r3, [r7, #24]
 800029e:	3308      	adds	r3, #8
 80002a0:	2201      	movs	r2, #1
 80002a2:	409a      	lsls	r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002a8:	69bb      	ldr	r3, [r7, #24]
 80002aa:	3301      	adds	r3, #1
 80002ac:	61bb      	str	r3, [r7, #24]
 80002ae:	69bb      	ldr	r3, [r7, #24]
 80002b0:	2b07      	cmp	r3, #7
 80002b2:	d9c1      	bls.n	8000238 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	697a      	ldr	r2, [r7, #20]
 80002b8:	605a      	str	r2, [r3, #4]
  }
}
 80002ba:	bf00      	nop
 80002bc:	3724      	adds	r7, #36	; 0x24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr

080002c4 <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002d2:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2202      	movs	r2, #2
 80002d8:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2204      	movs	r2, #4
 80002de:	70da      	strb	r2, [r3, #3]
}
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr

080002ea <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80002ea:	b480      	push	{r7}
 80002ec:	b085      	sub	sp, #20
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
 80002f2:	460b      	mov	r3, r1
 80002f4:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80002f6:	2300      	movs	r3, #0
 80002f8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	689a      	ldr	r2, [r3, #8]
 80002fe:	887b      	ldrh	r3, [r7, #2]
 8000300:	4013      	ands	r3, r2
 8000302:	2b00      	cmp	r3, #0
 8000304:	d002      	beq.n	800030c <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000306:	2301      	movs	r3, #1
 8000308:	73fb      	strb	r3, [r7, #15]
 800030a:	e001      	b.n	8000310 <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800030c:	2300      	movs	r3, #0
 800030e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000310:	7bfb      	ldrb	r3, [r7, #15]
}
 8000312:	4618      	mov	r0, r3
 8000314:	3714      	adds	r7, #20
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr

0800031c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	460b      	mov	r3, r1
 8000326:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8000328:	887a      	ldrh	r2, [r7, #2]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	611a      	str	r2, [r3, #16]
}
 800032e:	bf00      	nop
 8000330:	370c      	adds	r7, #12
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr

08000338 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b08a      	sub	sp, #40	; 0x28
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
 8000340:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000342:	2300      	movs	r3, #0
 8000344:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000346:	2300      	movs	r3, #0
 8000348:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800034a:	2304      	movs	r3, #4
 800034c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800034e:	4b57      	ldr	r3, [pc, #348]	; (80004ac <I2C_Init+0x174>)
 8000350:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	889b      	ldrh	r3, [r3, #4]
 8000356:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8000358:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800035a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800035e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000360:	f107 0308 	add.w	r3, r7, #8
 8000364:	4618      	mov	r0, r3
 8000366:	f000 f993 	bl	8000690 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800036a:	693b      	ldr	r3, [r7, #16]
 800036c:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	4a4f      	ldr	r2, [pc, #316]	; (80004b0 <I2C_Init+0x178>)
 8000372:	fba2 2303 	umull	r2, r3, r2, r3
 8000376:	0c9b      	lsrs	r3, r3, #18
 8000378:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800037a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800037c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800037e:	4313      	orrs	r3, r2
 8000380:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000386:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	b29b      	uxth	r3, r3
 800038e:	f023 0301 	bic.w	r3, r3, #1
 8000392:	b29a      	uxth	r2, r3
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000398:	2300      	movs	r3, #0
 800039a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800039c:	683b      	ldr	r3, [r7, #0]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a44      	ldr	r2, [pc, #272]	; (80004b4 <I2C_Init+0x17c>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d815      	bhi.n	80003d2 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	005b      	lsls	r3, r3, #1
 80003ac:	69fa      	ldr	r2, [r7, #28]
 80003ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b2:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 80003b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80003b6:	2b03      	cmp	r3, #3
 80003b8:	d801      	bhi.n	80003be <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 80003ba:	2304      	movs	r3, #4
 80003bc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 80003be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80003c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80003c2:	4313      	orrs	r3, r2
 80003c4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 80003c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80003c8:	3301      	adds	r3, #1
 80003ca:	b29a      	uxth	r2, r3
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	841a      	strh	r2, [r3, #32]
 80003d0:	e040      	b.n	8000454 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	88db      	ldrh	r3, [r3, #6]
 80003d6:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 80003da:	4293      	cmp	r3, r2
 80003dc:	d109      	bne.n	80003f2 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	681a      	ldr	r2, [r3, #0]
 80003e2:	4613      	mov	r3, r2
 80003e4:	005b      	lsls	r3, r3, #1
 80003e6:	4413      	add	r3, r2
 80003e8:	69fa      	ldr	r2, [r7, #28]
 80003ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 80003f0:	e00e      	b.n	8000410 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	681a      	ldr	r2, [r3, #0]
 80003f6:	4613      	mov	r3, r2
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	4413      	add	r3, r2
 80003fc:	009a      	lsls	r2, r3, #2
 80003fe:	4413      	add	r3, r2
 8000400:	69fa      	ldr	r2, [r7, #28]
 8000402:	fbb2 f3f3 	udiv	r3, r2, r3
 8000406:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000408:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800040a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800040e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8000410:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000416:	2b00      	cmp	r3, #0
 8000418:	d103      	bne.n	8000422 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800041a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800041c:	f043 0301 	orr.w	r3, r3, #1
 8000420:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 8000422:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000424:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000426:	4313      	orrs	r3, r2
 8000428:	b29b      	uxth	r3, r3
 800042a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800042e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000432:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000434:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000436:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800043a:	fb02 f303 	mul.w	r3, r2, r3
 800043e:	4a1e      	ldr	r2, [pc, #120]	; (80004b8 <I2C_Init+0x180>)
 8000440:	fb82 1203 	smull	r1, r2, r2, r3
 8000444:	1192      	asrs	r2, r2, #6
 8000446:	17db      	asrs	r3, r3, #31
 8000448:	1ad3      	subs	r3, r2, r3
 800044a:	b29b      	uxth	r3, r3
 800044c:	3301      	adds	r3, #1
 800044e:	b29a      	uxth	r2, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000458:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	b29b      	uxth	r3, r3
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	b29a      	uxth	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	881b      	ldrh	r3, [r3, #0]
 800046e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000470:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000472:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000476:	f023 0302 	bic.w	r3, r3, #2
 800047a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	889a      	ldrh	r2, [r3, #4]
 8000480:	683b      	ldr	r3, [r7, #0]
 8000482:	895b      	ldrh	r3, [r3, #10]
 8000484:	4313      	orrs	r3, r2
 8000486:	b29a      	uxth	r2, r3
 8000488:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800048a:	4313      	orrs	r3, r2
 800048c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000492:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	899a      	ldrh	r2, [r3, #12]
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	891b      	ldrh	r3, [r3, #8]
 800049c:	4313      	orrs	r3, r2
 800049e:	b29a      	uxth	r2, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	811a      	strh	r2, [r3, #8]
}
 80004a4:	bf00      	nop
 80004a6:	3728      	adds	r7, #40	; 0x28
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	007a1200 	.word	0x007a1200
 80004b0:	431bde83 	.word	0x431bde83
 80004b4:	000186a0 	.word	0x000186a0
 80004b8:	10624dd3 	.word	0x10624dd3

080004bc <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	460b      	mov	r3, r1
 80004c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004c8:	78fb      	ldrb	r3, [r7, #3]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d008      	beq.n	80004e0 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	881b      	ldrh	r3, [r3, #0]
 80004d2:	b29b      	uxth	r3, r3
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	b29a      	uxth	r2, r3
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 80004de:	e007      	b.n	80004f0 <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	881b      	ldrh	r3, [r3, #0]
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	f023 0301 	bic.w	r3, r3, #1
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	801a      	strh	r2, [r3, #0]
}
 80004f0:	bf00      	nop
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr

080004fa <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b083      	sub	sp, #12
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	460b      	mov	r3, r1
 8000504:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000506:	78fb      	ldrb	r3, [r7, #3]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d008      	beq.n	800051e <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	b29b      	uxth	r3, r3
 8000512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000516:	b29a      	uxth	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 800051c:	e007      	b.n	800052e <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	b29b      	uxth	r3, r3
 8000524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000528:	b29a      	uxth	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	801a      	strh	r2, [r3, #0]
}
 800052e:	bf00      	nop
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr

08000538 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	460b      	mov	r3, r1
 8000542:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000544:	78fb      	ldrb	r3, [r7, #3]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d008      	beq.n	800055c <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	b29b      	uxth	r3, r3
 8000550:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000554:	b29a      	uxth	r2, r3
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 800055a:	e007      	b.n	800056c <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	b29b      	uxth	r3, r3
 8000562:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000566:	b29a      	uxth	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	801a      	strh	r2, [r3, #0]
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr

08000576 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	460b      	mov	r3, r1
 8000580:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8000582:	78fb      	ldrb	r3, [r7, #3]
 8000584:	b29a      	uxth	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	821a      	strh	r2, [r3, #16]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
 80005a0:	4613      	mov	r3, r2
 80005a2:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 80005a4:	78bb      	ldrb	r3, [r7, #2]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d004      	beq.n	80005b4 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 80005aa:	78fb      	ldrb	r3, [r7, #3]
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	70fb      	strb	r3, [r7, #3]
 80005b2:	e003      	b.n	80005bc <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 80005b4:	78fb      	ldrb	r3, [r7, #3]
 80005b6:	f023 0301 	bic.w	r3, r3, #1
 80005ba:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 80005bc:	78fb      	ldrb	r3, [r7, #3]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	821a      	strh	r2, [r3, #16]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b087      	sub	sp, #28
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
 80005d6:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80005e4:	2300      	movs	r3, #0
 80005e6:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	8a9b      	ldrh	r3, [r3, #20]
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	8b1b      	ldrh	r3, [r3, #24]
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	041b      	lsls	r3, r3, #16
 80005fc:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 80005fe:	68fa      	ldr	r2, [r7, #12]
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	4313      	orrs	r3, r2
 8000604:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000608:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800060a:	693a      	ldr	r2, [r7, #16]
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	401a      	ands	r2, r3
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	429a      	cmp	r2, r3
 8000614:	d102      	bne.n	800061c <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8000616:	2301      	movs	r3, #1
 8000618:	75fb      	strb	r3, [r7, #23]
 800061a:	e001      	b.n	8000620 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800061c:	2300      	movs	r3, #0
 800061e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8000620:	7dfb      	ldrb	r3, [r7, #23]
}
 8000622:	4618      	mov	r0, r3
 8000624:	371c      	adds	r7, #28
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800062c:	b480      	push	{r7}
 800062e:	b087      	sub	sp, #28
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000636:	2300      	movs	r3, #0
 8000638:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	0f1b      	lsrs	r3, r3, #28
 800064a:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000652:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8000654:	693b      	ldr	r3, [r7, #16]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d003      	beq.n	8000662 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3314      	adds	r3, #20
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	e005      	b.n	800066e <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	0c1b      	lsrs	r3, r3, #16
 8000666:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	3318      	adds	r3, #24
 800066c:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	4013      	ands	r3, r2
 8000676:	2b00      	cmp	r3, #0
 8000678:	d002      	beq.n	8000680 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800067a:	2301      	movs	r3, #1
 800067c:	75fb      	strb	r3, [r7, #23]
 800067e:	e001      	b.n	8000684 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000680:	2300      	movs	r3, #0
 8000682:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8000684:	7dfb      	ldrb	r3, [r7, #23]
}
 8000686:	4618      	mov	r0, r3
 8000688:	371c      	adds	r7, #28
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr

08000690 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000690:	b480      	push	{r7}
 8000692:	b087      	sub	sp, #28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80006a8:	4b4c      	ldr	r3, [pc, #304]	; (80007dc <RCC_GetClocksFreq+0x14c>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	f003 030c 	and.w	r3, r3, #12
 80006b0:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	2b04      	cmp	r3, #4
 80006b6:	d007      	beq.n	80006c8 <RCC_GetClocksFreq+0x38>
 80006b8:	2b08      	cmp	r3, #8
 80006ba:	d009      	beq.n	80006d0 <RCC_GetClocksFreq+0x40>
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d133      	bne.n	8000728 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a47      	ldr	r2, [pc, #284]	; (80007e0 <RCC_GetClocksFreq+0x150>)
 80006c4:	601a      	str	r2, [r3, #0]
      break;
 80006c6:	e033      	b.n	8000730 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a45      	ldr	r2, [pc, #276]	; (80007e0 <RCC_GetClocksFreq+0x150>)
 80006cc:	601a      	str	r2, [r3, #0]
      break;
 80006ce:	e02f      	b.n	8000730 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80006d0:	4b42      	ldr	r3, [pc, #264]	; (80007dc <RCC_GetClocksFreq+0x14c>)
 80006d2:	685b      	ldr	r3, [r3, #4]
 80006d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80006d8:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80006da:	4b40      	ldr	r3, [pc, #256]	; (80007dc <RCC_GetClocksFreq+0x14c>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006e2:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	0c9b      	lsrs	r3, r3, #18
 80006e8:	3302      	adds	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d106      	bne.n	8000700 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	4a3b      	ldr	r2, [pc, #236]	; (80007e4 <RCC_GetClocksFreq+0x154>)
 80006f6:	fb02 f203 	mul.w	r2, r2, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80006fe:	e017      	b.n	8000730 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000700:	4b36      	ldr	r3, [pc, #216]	; (80007dc <RCC_GetClocksFreq+0x14c>)
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000708:	2b00      	cmp	r3, #0
 800070a:	d006      	beq.n	800071a <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	4a35      	ldr	r2, [pc, #212]	; (80007e4 <RCC_GetClocksFreq+0x154>)
 8000710:	fb02 f203 	mul.w	r2, r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	601a      	str	r2, [r3, #0]
      break;
 8000718:	e00a      	b.n	8000730 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800071a:	693b      	ldr	r3, [r7, #16]
 800071c:	4a30      	ldr	r2, [pc, #192]	; (80007e0 <RCC_GetClocksFreq+0x150>)
 800071e:	fb02 f203 	mul.w	r2, r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	601a      	str	r2, [r3, #0]
      break;
 8000726:	e003      	b.n	8000730 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4a2d      	ldr	r2, [pc, #180]	; (80007e0 <RCC_GetClocksFreq+0x150>)
 800072c:	601a      	str	r2, [r3, #0]
      break;
 800072e:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000730:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <RCC_GetClocksFreq+0x14c>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000738:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	091b      	lsrs	r3, r3, #4
 800073e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000740:	4a29      	ldr	r2, [pc, #164]	; (80007e8 <RCC_GetClocksFreq+0x158>)
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	4413      	add	r3, r2
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	40da      	lsrs	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000758:	4b20      	ldr	r3, [pc, #128]	; (80007dc <RCC_GetClocksFreq+0x14c>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000760:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	0a1b      	lsrs	r3, r3, #8
 8000766:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000768:	4a1f      	ldr	r2, [pc, #124]	; (80007e8 <RCC_GetClocksFreq+0x158>)
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	4413      	add	r3, r2
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	40da      	lsrs	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <RCC_GetClocksFreq+0x14c>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000788:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	0adb      	lsrs	r3, r3, #11
 800078e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000790:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <RCC_GetClocksFreq+0x158>)
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	4413      	add	r3, r2
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	685a      	ldr	r2, [r3, #4]
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	40da      	lsrs	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <RCC_GetClocksFreq+0x14c>)
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	0b9b      	lsrs	r3, r3, #14
 80007b6:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80007b8:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <RCC_GetClocksFreq+0x15c>)
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	68da      	ldr	r2, [r3, #12]
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	611a      	str	r2, [r3, #16]
}
 80007d2:	bf00      	nop
 80007d4:	371c      	adds	r7, #28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	40021000 	.word	0x40021000
 80007e0:	007a1200 	.word	0x007a1200
 80007e4:	003d0900 	.word	0x003d0900
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000010 	.word	0x20000010

080007f0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d006      	beq.n	8000810 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000802:	4909      	ldr	r1, [pc, #36]	; (8000828 <RCC_APB2PeriphClockCmd+0x38>)
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <RCC_APB2PeriphClockCmd+0x38>)
 8000806:	699a      	ldr	r2, [r3, #24]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4313      	orrs	r3, r2
 800080c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800080e:	e006      	b.n	800081e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000810:	4905      	ldr	r1, [pc, #20]	; (8000828 <RCC_APB2PeriphClockCmd+0x38>)
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <RCC_APB2PeriphClockCmd+0x38>)
 8000814:	699a      	ldr	r2, [r3, #24]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	43db      	mvns	r3, r3
 800081a:	4013      	ands	r3, r2
 800081c:	618b      	str	r3, [r1, #24]
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40021000 	.word	0x40021000

0800082c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000838:	78fb      	ldrb	r3, [r7, #3]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d006      	beq.n	800084c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800083e:	4909      	ldr	r1, [pc, #36]	; (8000864 <RCC_APB1PeriphClockCmd+0x38>)
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <RCC_APB1PeriphClockCmd+0x38>)
 8000842:	69da      	ldr	r2, [r3, #28]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4313      	orrs	r3, r2
 8000848:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800084a:	e006      	b.n	800085a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800084c:	4905      	ldr	r1, [pc, #20]	; (8000864 <RCC_APB1PeriphClockCmd+0x38>)
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <RCC_APB1PeriphClockCmd+0x38>)
 8000850:	69da      	ldr	r2, [r3, #28]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	43db      	mvns	r3, r3
 8000856:	4013      	ands	r3, r2
 8000858:	61cb      	str	r3, [r1, #28]
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	40021000 	.word	0x40021000

08000868 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a2e      	ldr	r2, [pc, #184]	; (8000938 <TIM_TimeBaseInit+0xd0>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d013      	beq.n	80008ac <TIM_TimeBaseInit+0x44>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a2d      	ldr	r2, [pc, #180]	; (800093c <TIM_TimeBaseInit+0xd4>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d00f      	beq.n	80008ac <TIM_TimeBaseInit+0x44>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000892:	d00b      	beq.n	80008ac <TIM_TimeBaseInit+0x44>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a2a      	ldr	r2, [pc, #168]	; (8000940 <TIM_TimeBaseInit+0xd8>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d007      	beq.n	80008ac <TIM_TimeBaseInit+0x44>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a29      	ldr	r2, [pc, #164]	; (8000944 <TIM_TimeBaseInit+0xdc>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d003      	beq.n	80008ac <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a28      	ldr	r2, [pc, #160]	; (8000948 <TIM_TimeBaseInit+0xe0>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d108      	bne.n	80008be <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80008ac:	89fb      	ldrh	r3, [r7, #14]
 80008ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008b2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	885a      	ldrh	r2, [r3, #2]
 80008b8:	89fb      	ldrh	r3, [r7, #14]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a22      	ldr	r2, [pc, #136]	; (800094c <TIM_TimeBaseInit+0xe4>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d00c      	beq.n	80008e0 <TIM_TimeBaseInit+0x78>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a21      	ldr	r2, [pc, #132]	; (8000950 <TIM_TimeBaseInit+0xe8>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d008      	beq.n	80008e0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80008ce:	89fb      	ldrh	r3, [r7, #14]
 80008d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008d4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	88da      	ldrh	r2, [r3, #6]
 80008da:	89fb      	ldrh	r3, [r7, #14]
 80008dc:	4313      	orrs	r3, r2
 80008de:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	89fa      	ldrh	r2, [r7, #14]
 80008e4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	889a      	ldrh	r2, [r3, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	881a      	ldrh	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <TIM_TimeBaseInit+0xd0>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d00f      	beq.n	800091e <TIM_TimeBaseInit+0xb6>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a0e      	ldr	r2, [pc, #56]	; (800093c <TIM_TimeBaseInit+0xd4>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d00b      	beq.n	800091e <TIM_TimeBaseInit+0xb6>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a12      	ldr	r2, [pc, #72]	; (8000954 <TIM_TimeBaseInit+0xec>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d007      	beq.n	800091e <TIM_TimeBaseInit+0xb6>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a11      	ldr	r2, [pc, #68]	; (8000958 <TIM_TimeBaseInit+0xf0>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d003      	beq.n	800091e <TIM_TimeBaseInit+0xb6>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a10      	ldr	r2, [pc, #64]	; (800095c <TIM_TimeBaseInit+0xf4>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d104      	bne.n	8000928 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	7a1b      	ldrb	r3, [r3, #8]
 8000922:	b29a      	uxth	r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2201      	movs	r2, #1
 800092c:	829a      	strh	r2, [r3, #20]
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	40012c00 	.word	0x40012c00
 800093c:	40013400 	.word	0x40013400
 8000940:	40000400 	.word	0x40000400
 8000944:	40000800 	.word	0x40000800
 8000948:	40000c00 	.word	0x40000c00
 800094c:	40001000 	.word	0x40001000
 8000950:	40001400 	.word	0x40001400
 8000954:	40014000 	.word	0x40014000
 8000958:	40014400 	.word	0x40014400
 800095c:	40014800 	.word	0x40014800

08000960 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800096e:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2200      	movs	r2, #0
 8000980:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2200      	movs	r2, #0
 8000986:	721a      	strb	r2, [r3, #8]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr

08000992 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	460b      	mov	r3, r1
 800099c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800099e:	78fb      	ldrb	r3, [r7, #3]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d008      	beq.n	80009b6 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 80009b4:	e007      	b.n	80009c6 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	f023 0301 	bic.w	r3, r3, #1
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	801a      	strh	r2, [r3, #0]
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	460b      	mov	r3, r1
 80009da:	807b      	strh	r3, [r7, #2]
 80009dc:	4613      	mov	r3, r2
 80009de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009e0:	787b      	ldrb	r3, [r7, #1]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d008      	beq.n	80009f8 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	899b      	ldrh	r3, [r3, #12]
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	887b      	ldrh	r3, [r7, #2]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80009f6:	e009      	b.n	8000a0c <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	899b      	ldrh	r3, [r3, #12]
 80009fc:	b29a      	uxth	r2, r3
 80009fe:	887b      	ldrh	r3, [r7, #2]
 8000a00:	43db      	mvns	r3, r3
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	4013      	ands	r3, r2
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	819a      	strh	r2, [r3, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr

08000a16 <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b087      	sub	sp, #28
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	60f8      	str	r0, [r7, #12]
 8000a1e:	4608      	mov	r0, r1
 8000a20:	4611      	mov	r1, r2
 8000a22:	461a      	mov	r2, r3
 8000a24:	4603      	mov	r3, r0
 8000a26:	817b      	strh	r3, [r7, #10]
 8000a28:	460b      	mov	r3, r1
 8000a2a:	813b      	strh	r3, [r7, #8]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	891b      	ldrh	r3, [r3, #8]
 8000a40:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	8b1b      	ldrh	r3, [r3, #24]
 8000a46:	82bb      	strh	r3, [r7, #20]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	8c1b      	ldrh	r3, [r3, #32]
 8000a4c:	827b      	strh	r3, [r7, #18]
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8000a4e:	8afb      	ldrh	r3, [r7, #22]
 8000a50:	f023 0307 	bic.w	r3, r3, #7
 8000a54:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 8000a56:	8afa      	ldrh	r2, [r7, #22]
 8000a58:	897b      	ldrh	r3, [r7, #10]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	82fb      	strh	r3, [r7, #22]
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8000a5e:	8abb      	ldrh	r3, [r7, #20]
 8000a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a64:	f023 0303 	bic.w	r3, r3, #3
 8000a68:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8000a6a:	8abb      	ldrh	r3, [r7, #20]
 8000a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	82bb      	strh	r3, [r7, #20]
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
 8000a76:	8a7b      	ldrh	r3, [r7, #18]
 8000a78:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000a7c:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	011b      	lsls	r3, r3, #4
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	893b      	ldrh	r3, [r7, #8]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	8a7b      	ldrh	r3, [r7, #18]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	827b      	strh	r3, [r7, #18]
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	8afa      	ldrh	r2, [r7, #22]
 8000a94:	811a      	strh	r2, [r3, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	8aba      	ldrh	r2, [r7, #20]
 8000a9a:	831a      	strh	r2, [r3, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	8a7a      	ldrh	r2, [r7, #18]
 8000aa0:	841a      	strh	r2, [r3, #32]
}
 8000aa2:	bf00      	nop
 8000aa4:	371c      	adds	r7, #28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000ab8:	2300      	movs	r3, #0
 8000aba:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	81bb      	strh	r3, [r7, #12]
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	8a1b      	ldrh	r3, [r3, #16]
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	4013      	ands	r3, r2
 8000ace:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	899b      	ldrh	r3, [r3, #12]
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	887b      	ldrh	r3, [r7, #2]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000adc:	89bb      	ldrh	r3, [r7, #12]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d005      	beq.n	8000aee <TIM_GetITStatus+0x42>
 8000ae2:	897b      	ldrh	r3, [r7, #10]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d002      	beq.n	8000aee <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	73fb      	strb	r3, [r7, #15]
 8000aec:	e001      	b.n	8000af2 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000aee:	2300      	movs	r3, #0
 8000af0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr

08000afe <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	460b      	mov	r3, r1
 8000b08:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000b0a:	887b      	ldrh	r3, [r7, #2]
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	821a      	strh	r2, [r3, #16]
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
	...

08000b20 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 8000b2a:	4908      	ldr	r1, [pc, #32]	; (8000b4c <NVIC_EnableIRQ+0x2c>)
 8000b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b30:	095b      	lsrs	r3, r3, #5
 8000b32:	79fa      	ldrb	r2, [r7, #7]
 8000b34:	f002 021f 	and.w	r2, r2, #31
 8000b38:	2001      	movs	r0, #1
 8000b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <encoder_init>:
#include "stm32f10x_rcc.h"
#include "Encoder.h"

//Initialization encoder
void encoder_init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000b56:	2101      	movs	r1, #1
 8000b58:	2004      	movs	r0, #4
 8000b5a:	f7ff fe49 	bl	80007f0 <RCC_APB2PeriphClockCmd>
    GPIO_InitTypeDef gpio_cfg;
    gpio_cfg.GPIO_Mode = GPIO_Mode_IPU;
 8000b5e:	2348      	movs	r3, #72	; 0x48
 8000b60:	75fb      	strb	r3, [r7, #23]
    gpio_cfg.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8000b62:	23c0      	movs	r3, #192	; 0xc0
 8000b64:	82bb      	strh	r3, [r7, #20]
    gpio_cfg.GPIO_Speed = GPIO_Speed_2MHz;
 8000b66:	2302      	movs	r3, #2
 8000b68:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOA, &gpio_cfg);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	481f      	ldr	r0, [pc, #124]	; (8000bf0 <encoder_init+0xa0>)
 8000b72:	f7ff faeb 	bl	800014c <GPIO_Init>

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8000b76:	2101      	movs	r1, #1
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f7ff fe57 	bl	800082c <RCC_APB1PeriphClockCmd>

    //Configure TIM3
    TIM_TimeBaseInitTypeDef TIMER_InitStructure;
    TIM_TimeBaseStructInit(&TIMER_InitStructure);
 8000b7e:	f107 0308 	add.w	r3, r7, #8
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff feec 	bl	8000960 <TIM_TimeBaseStructInit>
    TIMER_InitStructure.TIM_Period = 3;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	81bb      	strh	r3, [r7, #12]
    TIMER_InitStructure.TIM_CounterMode = TIM_CounterMode_Up | TIM_CounterMode_Down;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	817b      	strh	r3, [r7, #10]
    TIM_TimeBaseInit(TIM3, &TIMER_InitStructure);
 8000b90:	f107 0308 	add.w	r3, r7, #8
 8000b94:	4619      	mov	r1, r3
 8000b96:	4817      	ldr	r0, [pc, #92]	; (8000bf4 <encoder_init+0xa4>)
 8000b98:	f7ff fe66 	bl	8000868 <TIM_TimeBaseInit>

    //Configure Encoder Interface, interrupt
    TIM_EncoderInterfaceConfig(TIM3, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2103      	movs	r1, #3
 8000ba2:	4814      	ldr	r0, [pc, #80]	; (8000bf4 <encoder_init+0xa4>)
 8000ba4:	f7ff ff37 	bl	8000a16 <TIM_EncoderInterfaceConfig>
    TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2101      	movs	r1, #1
 8000bac:	4811      	ldr	r0, [pc, #68]	; (8000bf4 <encoder_init+0xa4>)
 8000bae:	f7ff ff0f 	bl	80009d0 <TIM_ITConfig>
    TIM_Cmd(TIM3, ENABLE);
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	480f      	ldr	r0, [pc, #60]	; (8000bf4 <encoder_init+0xa4>)
 8000bb6:	f7ff feec 	bl	8000992 <TIM_Cmd>

    NVIC_EnableIRQ(TIM3_IRQn);
 8000bba:	201d      	movs	r0, #29
 8000bbc:	f7ff ffb0 	bl	8000b20 <NVIC_EnableIRQ>

    GPIO_InitTypeDef port;
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	2004      	movs	r0, #4
 8000bc4:	f7ff fe14 	bl	80007f0 <RCC_APB2PeriphClockCmd>
    GPIO_StructInit(&port);
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fb7a 	bl	80002c4 <GPIO_StructInit>
    port.GPIO_Mode = GPIO_Mode_IPU;
 8000bd0:	2348      	movs	r3, #72	; 0x48
 8000bd2:	71fb      	strb	r3, [r7, #7]
    port.GPIO_Pin = GPIO_Pin_5;
 8000bd4:	2320      	movs	r3, #32
 8000bd6:	80bb      	strh	r3, [r7, #4]
    port.GPIO_Speed = GPIO_Speed_2MHz;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOA, &port);
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <encoder_init+0xa0>)
 8000be2:	f7ff fab3 	bl	800014c <GPIO_Init>
}
 8000be6:	bf00      	nop
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40010800 	.word	0x40010800
 8000bf4:	40000400 	.word	0x40000400

08000bf8 <init_I2C1>:
//I2C
GPIO_InitTypeDef i2c_gpio;
I2C_InitTypeDef i2c;

void init_I2C1(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    //Include the timing of the required modules
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2008      	movs	r0, #8
 8000c00:	f7ff fdf6 	bl	80007f0 <RCC_APB2PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8000c04:	2101      	movs	r1, #1
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff fdf2 	bl	80007f0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000c12:	f7ff fe0b 	bl	800082c <RCC_APB1PeriphClockCmd>

    // I2C setting
    i2c.I2C_ClockSpeed = 100000;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <init_I2C1+0x78>)
 8000c18:	4a16      	ldr	r2, [pc, #88]	; (8000c74 <init_I2C1+0x7c>)
 8000c1a:	601a      	str	r2, [r3, #0]
    i2c.I2C_Mode = I2C_Mode_I2C;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <init_I2C1+0x78>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	809a      	strh	r2, [r3, #4]
    i2c.I2C_DutyCycle = I2C_DutyCycle_2;
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <init_I2C1+0x78>)
 8000c24:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000c28:	80da      	strh	r2, [r3, #6]
    i2c.I2C_OwnAddress1 = 0x15;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <init_I2C1+0x78>)
 8000c2c:	2215      	movs	r2, #21
 8000c2e:	811a      	strh	r2, [r3, #8]
    i2c.I2C_Ack = I2C_Ack_Enable;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <init_I2C1+0x78>)
 8000c32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c36:	815a      	strh	r2, [r3, #10]
    i2c.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <init_I2C1+0x78>)
 8000c3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c3e:	819a      	strh	r2, [r3, #12]
    I2C_Init(I2C1, &i2c);
 8000c40:	490b      	ldr	r1, [pc, #44]	; (8000c70 <init_I2C1+0x78>)
 8000c42:	480d      	ldr	r0, [pc, #52]	; (8000c78 <init_I2C1+0x80>)
 8000c44:	f7ff fb78 	bl	8000338 <I2C_Init>
    i2c_gpio.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <init_I2C1+0x84>)
 8000c4a:	22c0      	movs	r2, #192	; 0xc0
 8000c4c:	801a      	strh	r2, [r3, #0]
    i2c_gpio.GPIO_Mode = GPIO_Mode_AF_OD;
 8000c4e:	4b0b      	ldr	r3, [pc, #44]	; (8000c7c <init_I2C1+0x84>)
 8000c50:	221c      	movs	r2, #28
 8000c52:	70da      	strb	r2, [r3, #3]
    i2c_gpio.GPIO_Speed = GPIO_Speed_50MHz;
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <init_I2C1+0x84>)
 8000c56:	2203      	movs	r2, #3
 8000c58:	709a      	strb	r2, [r3, #2]
    GPIO_Init(GPIOB, &i2c_gpio);
 8000c5a:	4908      	ldr	r1, [pc, #32]	; (8000c7c <init_I2C1+0x84>)
 8000c5c:	4808      	ldr	r0, [pc, #32]	; (8000c80 <init_I2C1+0x88>)
 8000c5e:	f7ff fa75 	bl	800014c <GPIO_Init>

    //Turn on I2C1
    I2C_Cmd(I2C1, ENABLE);
 8000c62:	2101      	movs	r1, #1
 8000c64:	4804      	ldr	r0, [pc, #16]	; (8000c78 <init_I2C1+0x80>)
 8000c66:	f7ff fc29 	bl	80004bc <I2C_Cmd>
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000038 	.word	0x20000038
 8000c74:	000186a0 	.word	0x000186a0
 8000c78:	40005400 	.word	0x40005400
 8000c7c:	20000048 	.word	0x20000048
 8000c80:	40010c00 	.word	0x40010c00

08000c84 <I2C_StartTransmission>:

void I2C_StartTransmission(I2C_TypeDef* I2Cx, uint8_t transmissionDirection,  uint8_t slaveAddress)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	70fb      	strb	r3, [r7, #3]
 8000c90:	4613      	mov	r3, r2
 8000c92:	70bb      	strb	r3, [r7, #2]
    while(I2C_GetFlagStatus(I2Cx, I2C_FLAG_BUSY));
 8000c94:	bf00      	nop
 8000c96:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000c9a:	6878      	ldr	r0, [r7, #4]
 8000c9c:	f7ff fcc6 	bl	800062c <I2C_GetFlagStatus>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1f7      	bne.n	8000c96 <I2C_StartTransmission+0x12>
    I2C_GenerateSTART(I2Cx, ENABLE);
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff fc26 	bl	80004fa <I2C_GenerateSTART>
    while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_MODE_SELECT));
 8000cae:	bf00      	nop
 8000cb0:	4914      	ldr	r1, [pc, #80]	; (8000d04 <I2C_StartTransmission+0x80>)
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff fc8b 	bl	80005ce <I2C_CheckEvent>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d0f8      	beq.n	8000cb0 <I2C_StartTransmission+0x2c>
    I2C_Send7bitAddress(I2Cx, slaveAddress<<1, transmissionDirection);
 8000cbe:	78bb      	ldrb	r3, [r7, #2]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	78fa      	ldrb	r2, [r7, #3]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff fc63 	bl	8000594 <I2C_Send7bitAddress>
    if(transmissionDirection== I2C_Direction_Transmitter)
 8000cce:	78fb      	ldrb	r3, [r7, #3]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d107      	bne.n	8000ce4 <I2C_StartTransmission+0x60>
    {
        while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8000cd4:	bf00      	nop
 8000cd6:	490c      	ldr	r1, [pc, #48]	; (8000d08 <I2C_StartTransmission+0x84>)
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff fc78 	bl	80005ce <I2C_CheckEvent>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d0f8      	beq.n	8000cd6 <I2C_StartTransmission+0x52>
    }
    if(transmissionDirection== I2C_Direction_Receiver)
 8000ce4:	78fb      	ldrb	r3, [r7, #3]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d107      	bne.n	8000cfa <I2C_StartTransmission+0x76>
    {
        while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 8000cea:	bf00      	nop
 8000cec:	4907      	ldr	r1, [pc, #28]	; (8000d0c <I2C_StartTransmission+0x88>)
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff fc6d 	bl	80005ce <I2C_CheckEvent>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d0f8      	beq.n	8000cec <I2C_StartTransmission+0x68>
    }
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	00030001 	.word	0x00030001
 8000d08:	00070082 	.word	0x00070082
 8000d0c:	00030002 	.word	0x00030002

08000d10 <I2C_WriteData>:


void I2C_WriteData(I2C_TypeDef* I2Cx, uint8_t data)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	70fb      	strb	r3, [r7, #3]
    I2C_SendData(I2Cx, data);
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	4619      	mov	r1, r3
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff fc28 	bl	8000576 <I2C_SendData>
    while(!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8000d26:	bf00      	nop
 8000d28:	4905      	ldr	r1, [pc, #20]	; (8000d40 <I2C_WriteData+0x30>)
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff fc4f 	bl	80005ce <I2C_CheckEvent>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d0f8      	beq.n	8000d28 <I2C_WriteData+0x18>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	00070084 	.word	0x00070084

08000d44 <LCDI2C_write>:
#include "delay.h"
#include "I2C.h"
#include "LCD_I2C.h"


void LCDI2C_write(uint8_t value) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
    LCDI2C_send(value, Rs);
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2101      	movs	r1, #1
 8000d52:	4618      	mov	r0, r3
 8000d54:	f000 f8ca 	bl	8000eec <LCDI2C_send>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <LCDI2C_init>:

LiquidCrystal_I2C_Def lcdi2c;

//Initialization LCD_I2C
void LCDI2C_init(uint8_t lcd_Addr,uint8_t lcd_cols,uint8_t lcd_rows)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	71bb      	strb	r3, [r7, #6]
 8000d6e:	4613      	mov	r3, r2
 8000d70:	717b      	strb	r3, [r7, #5]
    lcdi2c.Addr = lcd_Addr;
 8000d72:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <LCDI2C_init+0x48>)
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	7013      	strb	r3, [r2, #0]
    lcdi2c.cols = lcd_cols;
 8000d78:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <LCDI2C_init+0x48>)
 8000d7a:	79bb      	ldrb	r3, [r7, #6]
 8000d7c:	7153      	strb	r3, [r2, #5]
    lcdi2c.rows = lcd_rows;
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <LCDI2C_init+0x48>)
 8000d80:	797b      	ldrb	r3, [r7, #5]
 8000d82:	7193      	strb	r3, [r2, #6]
    lcdi2c.backlightval = LCD_NOBACKLIGHT;
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <LCDI2C_init+0x48>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	71da      	strb	r2, [r3, #7]

    init_I2C1(); //Initialization I2C1
 8000d8a:	f7ff ff35 	bl	8000bf8 <init_I2C1>
    lcdi2c.displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <LCDI2C_init+0x48>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	705a      	strb	r2, [r3, #1]
    LCDI2C_begin(lcd_cols, lcd_rows);
 8000d94:	797a      	ldrb	r2, [r7, #5]
 8000d96:	79bb      	ldrb	r3, [r7, #6]
 8000d98:	4611      	mov	r1, r2
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f806 	bl	8000dac <LCDI2C_begin>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	2000004c 	.word	0x2000004c

08000dac <LCDI2C_begin>:

//Start LCD_I2C
void LCDI2C_begin(uint8_t cols, uint8_t lines) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	460a      	mov	r2, r1
 8000db6:	71fb      	strb	r3, [r7, #7]
 8000db8:	4613      	mov	r3, r2
 8000dba:	71bb      	strb	r3, [r7, #6]
    if (lines > 1) {
 8000dbc:	79bb      	ldrb	r3, [r7, #6]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d906      	bls.n	8000dd0 <LCDI2C_begin+0x24>
        lcdi2c.displayfunction |= LCD_2LINE;
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <LCDI2C_begin+0xb0>)
 8000dc4:	785b      	ldrb	r3, [r3, #1]
 8000dc6:	f043 0308 	orr.w	r3, r3, #8
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <LCDI2C_begin+0xb0>)
 8000dce:	705a      	strb	r2, [r3, #1]
    }
    lcdi2c.numlines = lines;
 8000dd0:	4a22      	ldr	r2, [pc, #136]	; (8000e5c <LCDI2C_begin+0xb0>)
 8000dd2:	79bb      	ldrb	r3, [r7, #6]
 8000dd4:	7113      	strb	r3, [r2, #4]
    Delay(50);
 8000dd6:	2032      	movs	r0, #50	; 0x32
 8000dd8:	f000 f932 	bl	8001040 <Delay>

    // Pull both RS and R/W low to begin commands
    LCDI2C_expanderWrite(lcdi2c.backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <LCDI2C_begin+0xb0>)
 8000dde:	79db      	ldrb	r3, [r3, #7]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 f8b5 	bl	8000f50 <LCDI2C_expanderWrite>
    Delay(1000);
 8000de6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dea:	f000 f929 	bl	8001040 <Delay>

    //Start in 8bit mode, try to set 4 bit mode
    LCDI2C_write4bits(0x03 << 4);
 8000dee:	2030      	movs	r0, #48	; 0x30
 8000df0:	f000 f89d 	bl	8000f2e <LCDI2C_write4bits>
    DelayMC(4500); // wait min 4.1ms
 8000df4:	f241 1094 	movw	r0, #4500	; 0x1194
 8000df8:	f000 f942 	bl	8001080 <DelayMC>

    //Second
    LCDI2C_write4bits(0x03 << 4);
 8000dfc:	2030      	movs	r0, #48	; 0x30
 8000dfe:	f000 f896 	bl	8000f2e <LCDI2C_write4bits>
    DelayMC(4500); // wait min 4.1ms
 8000e02:	f241 1094 	movw	r0, #4500	; 0x1194
 8000e06:	f000 f93b 	bl	8001080 <DelayMC>

    //Third
    LCDI2C_write4bits(0x03 << 4);
 8000e0a:	2030      	movs	r0, #48	; 0x30
 8000e0c:	f000 f88f 	bl	8000f2e <LCDI2C_write4bits>
    DelayMC(150);
 8000e10:	2096      	movs	r0, #150	; 0x96
 8000e12:	f000 f935 	bl	8001080 <DelayMC>

    //Set to 4-bit interface
    LCDI2C_write4bits(0x02 << 4);
 8000e16:	2020      	movs	r0, #32
 8000e18:	f000 f889 	bl	8000f2e <LCDI2C_write4bits>


    //Set # lines, font size, etc.
    LCDI2C_command(LCD_FUNCTIONSET | lcdi2c.displayfunction);
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <LCDI2C_begin+0xb0>)
 8000e1e:	785b      	ldrb	r3, [r3, #1]
 8000e20:	f043 0320 	orr.w	r3, r3, #32
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f852 	bl	8000ed0 <LCDI2C_command>

    //Turn the display on with no cursor or blinking default
    lcdi2c.displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <LCDI2C_begin+0xb0>)
 8000e2e:	2204      	movs	r2, #4
 8000e30:	709a      	strb	r2, [r3, #2]
    LCDI2C_display();
 8000e32:	f000 f82b 	bl	8000e8c <LCDI2C_display>
    LCDI2C_clear();
 8000e36:	f000 f813 	bl	8000e60 <LCDI2C_clear>

    //Initialize to default text direction
    lcdi2c.displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <LCDI2C_begin+0xb0>)
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	70da      	strb	r2, [r3, #3]

    //Set the entry mode
    LCDI2C_command(LCD_ENTRYMODESET | lcdi2c.displaymode);
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <LCDI2C_begin+0xb0>)
 8000e42:	78db      	ldrb	r3, [r3, #3]
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f840 	bl	8000ed0 <LCDI2C_command>

    LCDI2C_home();
 8000e50:	f000 f811 	bl	8000e76 <LCDI2C_home>

}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	2000004c 	.word	0x2000004c

08000e60 <LCDI2C_clear>:

// Clear display, set cursor position to zero
void LCDI2C_clear() {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
    LCDI2C_command(LCD_CLEARDISPLAY);
 8000e64:	2001      	movs	r0, #1
 8000e66:	f000 f833 	bl	8000ed0 <LCDI2C_command>
    DelayMC(3000);
 8000e6a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e6e:	f000 f907 	bl	8001080 <DelayMC>
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <LCDI2C_home>:
// Set cursor position to zero
void LCDI2C_home() {
 8000e76:	b580      	push	{r7, lr}
 8000e78:	af00      	add	r7, sp, #0
    LCDI2C_command(LCD_RETURNHOME);
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f000 f828 	bl	8000ed0 <LCDI2C_command>
    DelayMC(3000);
 8000e80:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e84:	f000 f8fc 	bl	8001080 <DelayMC>
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <LCDI2C_display>:
// Turn the display on/off
void LCDI2C_noDisplay() {
    lcdi2c.displaycontrol &= ~LCD_DISPLAYON;
    LCDI2C_command(LCD_DISPLAYCONTROL | lcdi2c.displaycontrol);
}
void LCDI2C_display() {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
    lcdi2c.displaycontrol |= LCD_DISPLAYON;
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <LCDI2C_display+0x28>)
 8000e92:	789b      	ldrb	r3, [r3, #2]
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <LCDI2C_display+0x28>)
 8000e9c:	709a      	strb	r2, [r3, #2]
    LCDI2C_command(LCD_DISPLAYCONTROL | lcdi2c.displaycontrol);
 8000e9e:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <LCDI2C_display+0x28>)
 8000ea0:	789b      	ldrb	r3, [r3, #2]
 8000ea2:	f043 0308 	orr.w	r3, r3, #8
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f811 	bl	8000ed0 <LCDI2C_command>
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2000004c 	.word	0x2000004c

08000eb8 <LCDI2C_backlight>:
// Turn the (optional) backlight off/on
void LCDI2C_noBacklight(void) {
    lcdi2c.backlightval=LCD_NOBACKLIGHT;
    LCDI2C_expanderWrite(0);
}
void LCDI2C_backlight(void) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
    lcdi2c.backlightval=LCD_BACKLIGHT;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <LCDI2C_backlight+0x14>)
 8000ebe:	2208      	movs	r2, #8
 8000ec0:	71da      	strb	r2, [r3, #7]
    LCDI2C_expanderWrite(0);
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f000 f844 	bl	8000f50 <LCDI2C_expanderWrite>
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2000004c 	.word	0x2000004c

08000ed0 <LCDI2C_command>:

void LCDI2C_command(uint8_t value) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
    LCDI2C_send(value, 0);
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f804 	bl	8000eec <LCDI2C_send>
}
 8000ee4:	bf00      	nop
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <LCDI2C_send>:

// Write either command or data
void LCDI2C_send(uint8_t value, uint8_t mode) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	460a      	mov	r2, r1
 8000ef6:	71fb      	strb	r3, [r7, #7]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	71bb      	strb	r3, [r7, #6]
    uint8_t highnib=value&0xf0;
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	f023 030f 	bic.w	r3, r3, #15
 8000f02:	73fb      	strb	r3, [r7, #15]
    uint8_t lownib=(value<<4)&0xf0;
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	73bb      	strb	r3, [r7, #14]
    LCDI2C_write4bits((highnib)|mode);
 8000f0a:	7bfa      	ldrb	r2, [r7, #15]
 8000f0c:	79bb      	ldrb	r3, [r7, #6]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f80b 	bl	8000f2e <LCDI2C_write4bits>
    LCDI2C_write4bits((lownib)|mode);
 8000f18:	7bba      	ldrb	r2, [r7, #14]
 8000f1a:	79bb      	ldrb	r3, [r7, #6]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f804 	bl	8000f2e <LCDI2C_write4bits>
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <LCDI2C_write4bits>:

void LCDI2C_write4bits(uint8_t value) {
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	71fb      	strb	r3, [r7, #7]
    LCDI2C_expanderWrite(value);
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f808 	bl	8000f50 <LCDI2C_expanderWrite>
    LCDI2C_pulseEnable(value);
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f826 	bl	8000f94 <LCDI2C_pulseEnable>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <LCDI2C_expanderWrite>:

void LCDI2C_expanderWrite(uint8_t _data) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
    I2C_StartTransmission (I2C1, I2C_Direction_Transmitter, lcdi2c.Addr);
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <LCDI2C_expanderWrite+0x3c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	2100      	movs	r1, #0
 8000f62:	480b      	ldr	r0, [pc, #44]	; (8000f90 <LCDI2C_expanderWrite+0x40>)
 8000f64:	f7ff fe8e 	bl	8000c84 <I2C_StartTransmission>
    I2C_WriteData(I2C1, (int)(_data) | lcdi2c.backlightval);
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <LCDI2C_expanderWrite+0x3c>)
 8000f6a:	79da      	ldrb	r2, [r3, #7]
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	4619      	mov	r1, r3
 8000f74:	4806      	ldr	r0, [pc, #24]	; (8000f90 <LCDI2C_expanderWrite+0x40>)
 8000f76:	f7ff fecb 	bl	8000d10 <I2C_WriteData>
    I2C_GenerateSTOP(I2C1, ENABLE);
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <LCDI2C_expanderWrite+0x40>)
 8000f7e:	f7ff fadb 	bl	8000538 <I2C_GenerateSTOP>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000004c 	.word	0x2000004c
 8000f90:	40005400 	.word	0x40005400

08000f94 <LCDI2C_pulseEnable>:

void LCDI2C_pulseEnable(uint8_t _data) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
    LCDI2C_expanderWrite(_data | En);	// En high
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ffd2 	bl	8000f50 <LCDI2C_expanderWrite>
    DelayMC(1);		// Enable pulse must be >450ns
 8000fac:	2001      	movs	r0, #1
 8000fae:	f000 f867 	bl	8001080 <DelayMC>

    LCDI2C_expanderWrite(_data & ~En);	// En low
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f023 0304 	bic.w	r3, r3, #4
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff ffc8 	bl	8000f50 <LCDI2C_expanderWrite>
    DelayMC(50);	// Commands need > 37us to settle
 8000fc0:	2032      	movs	r0, #50	; 0x32
 8000fc2:	f000 f85d 	bl	8001080 <DelayMC>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <LCDI2C_write_String>:

void LCDI2C_write_String(char* str) {
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
    uint8_t i=0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
    while(str[i])
 8000fda:	e009      	b.n	8000ff0 <LCDI2C_write_String+0x22>
    {
        LCDI2C_write(str[i]);
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fead 	bl	8000d44 <LCDI2C_write>
        i++;
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	3301      	adds	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
    while(str[i])
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1ef      	bne.n	8000fdc <LCDI2C_write_String+0xe>
    }
}
 8000ffc:	bf00      	nop
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <rele_init>:
#include "stm32f10x_gpio.h"
#include "stm32f10x_rcc.h"
#include "Rele.h"

void rele_init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800100a:	2101      	movs	r1, #1
 800100c:	2004      	movs	r0, #4
 800100e:	f7ff fbef 	bl	80007f0 <RCC_APB2PeriphClockCmd>
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10| GPIO_Pin_11| GPIO_Pin_12;
 8001012:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001016:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8001018:	2310      	movs	r3, #16
 800101a:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 800101c:	2302      	movs	r3, #2
 800101e:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	; (800103c <rele_init+0x38>)
 8001026:	f7ff f891 	bl	800014c <GPIO_Init>
    GPIO_SetBits(GPIOA, GPIO_Pin_9|GPIO_Pin_10| GPIO_Pin_11| GPIO_Pin_12);
 800102a:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 800102e:	4803      	ldr	r0, [pc, #12]	; (800103c <rele_init+0x38>)
 8001030:	f7ff f974 	bl	800031c <GPIO_SetBits>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40010800 	.word	0x40010800

08001040 <Delay>:
#include "stm32f10x_rcc.h"
#include "delay.h"

// Delay in milliseconds
void Delay(uint32_t ms)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
    volatile uint32_t nCount;
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq (&RCC_Clocks);
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fb1f 	bl	8000690 <RCC_GetClocksFreq>

    nCount=(RCC_Clocks.HCLK_Frequency/10000)*ms;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4a09      	ldr	r2, [pc, #36]	; (800107c <Delay+0x3c>)
 8001056:	fba2 2303 	umull	r2, r3, r2, r3
 800105a:	0b5b      	lsrs	r3, r3, #13
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	fb02 f303 	mul.w	r3, r2, r3
 8001062:	61fb      	str	r3, [r7, #28]
    for (; nCount!=0; nCount--);
 8001064:	e002      	b.n	800106c <Delay+0x2c>
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3b01      	subs	r3, #1
 800106a:	61fb      	str	r3, [r7, #28]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f9      	bne.n	8001066 <Delay+0x26>
}
 8001072:	bf00      	nop
 8001074:	3720      	adds	r7, #32
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	d1b71759 	.word	0xd1b71759

08001080 <DelayMC>:

// Delay in microseconds
void DelayMC(uint32_t mc)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
    volatile uint32_t nCount;
    RCC_ClocksTypeDef RCC_Clocks;
    RCC_GetClocksFreq (&RCC_Clocks);
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff faff 	bl	8000690 <RCC_GetClocksFreq>

    nCount=(RCC_Clocks.HCLK_Frequency/10000000)*mc;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4a09      	ldr	r2, [pc, #36]	; (80010bc <DelayMC+0x3c>)
 8001096:	fba2 2303 	umull	r2, r3, r2, r3
 800109a:	0d9b      	lsrs	r3, r3, #22
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	fb02 f303 	mul.w	r3, r2, r3
 80010a2:	61fb      	str	r3, [r7, #28]
    for (; nCount!=0; nCount--);
 80010a4:	e002      	b.n	80010ac <DelayMC+0x2c>
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f9      	bne.n	80010a6 <DelayMC+0x26>
}
 80010b2:	bf00      	nop
 80010b4:	3720      	adds	r7, #32
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	6b5fca6b 	.word	0x6b5fca6b

080010c0 <TIM3_IRQHandler>:
volatile uint8_t encoder_status = INIT;
volatile uint8_t encoder_direction = FORWARD;

//Interrupt TIM3
void TIM3_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
    if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET)
 80010c4:	2101      	movs	r1, #1
 80010c6:	4812      	ldr	r0, [pc, #72]	; (8001110 <TIM3_IRQHandler+0x50>)
 80010c8:	f7ff fcf0 	bl	8000aac <TIM_GetITStatus>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d01c      	beq.n	800110c <TIM3_IRQHandler+0x4c>
    {
        TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 80010d2:	2101      	movs	r1, #1
 80010d4:	480e      	ldr	r0, [pc, #56]	; (8001110 <TIM3_IRQHandler+0x50>)
 80010d6:	f7ff fd12 	bl	8000afe <TIM_ClearITPendingBit>
        if (encoder_status == INIT)
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <TIM3_IRQHandler+0x54>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	2b03      	cmp	r3, #3
 80010e2:	d103      	bne.n	80010ec <TIM3_IRQHandler+0x2c>
            encoder_status = NOREADY;
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <TIM3_IRQHandler+0x54>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	e002      	b.n	80010f2 <TIM3_IRQHandler+0x32>
        else
            encoder_status = READY;
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <TIM3_IRQHandler+0x54>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	701a      	strb	r2, [r3, #0]

        //Direction of rotation of the encoder
        encoder_direction = (TIM3->CR1 & TIM_CR1_DIR ? BACKWARD : FORWARD);
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <TIM3_IRQHandler+0x50>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	f003 0310 	and.w	r3, r3, #16
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	bf14      	ite	ne
 8001100:	2301      	movne	r3, #1
 8001102:	2300      	moveq	r3, #0
 8001104:	b2db      	uxtb	r3, r3
 8001106:	461a      	mov	r2, r3
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <TIM3_IRQHandler+0x58>)
 800110a:	701a      	strb	r2, [r3, #0]
    }
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40000400 	.word	0x40000400
 8001114:	20000014 	.word	0x20000014
 8001118:	20000034 	.word	0x20000034

0800111c <main>:

int main()
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0
    rele_init();
 8001122:	f7ff ff6f 	bl	8001004 <rele_init>
    encoder_init();
 8001126:	f7ff fd13 	bl	8000b50 <encoder_init>
    LCDI2C_init(0x27,16,2);
 800112a:	2202      	movs	r2, #2
 800112c:	2110      	movs	r1, #16
 800112e:	2027      	movs	r0, #39	; 0x27
 8001130:	f7ff fe16 	bl	8000d60 <LCDI2C_init>
    Delay(1000);
 8001134:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001138:	f7ff ff82 	bl	8001040 <Delay>
    LCDI2C_backlight();
 800113c:	f7ff febc 	bl	8000eb8 <LCDI2C_backlight>
    LCDI2C_write_String("Relay_1 off");
 8001140:	485a      	ldr	r0, [pc, #360]	; (80012ac <main+0x190>)
 8001142:	f7ff ff44 	bl	8000fce <LCDI2C_write_String>
    char rele=1;
 8001146:	2301      	movs	r3, #1
 8001148:	77fb      	strb	r3, [r7, #31]
    bool stan[4] = {false};
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
    char str[20];
    while (1)
    {
        if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_5) == 0)	//Checking the encoder click
 800114e:	2120      	movs	r1, #32
 8001150:	4857      	ldr	r0, [pc, #348]	; (80012b0 <main+0x194>)
 8001152:	f7ff f8ca 	bl	80002ea <GPIO_ReadInputDataBit>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d163      	bne.n	8001224 <main+0x108>

        {
            LCDI2C_clear();
 800115c:	f7ff fe80 	bl	8000e60 <LCDI2C_clear>
            //Relay inversion
            if (stan[rele-1]==false) stan[rele-1]=true;
 8001160:	7ffb      	ldrb	r3, [r7, #31]
 8001162:	3b01      	subs	r3, #1
 8001164:	f107 0220 	add.w	r2, r7, #32
 8001168:	4413      	add	r3, r2
 800116a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800116e:	f083 0301 	eor.w	r3, r3, #1
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d008      	beq.n	800118a <main+0x6e>
 8001178:	7ffb      	ldrb	r3, [r7, #31]
 800117a:	3b01      	subs	r3, #1
 800117c:	f107 0220 	add.w	r2, r7, #32
 8001180:	4413      	add	r3, r2
 8001182:	2201      	movs	r2, #1
 8001184:	f803 2c08 	strb.w	r2, [r3, #-8]
 8001188:	e007      	b.n	800119a <main+0x7e>
            else stan[rele-1]=false;
 800118a:	7ffb      	ldrb	r3, [r7, #31]
 800118c:	3b01      	subs	r3, #1
 800118e:	f107 0220 	add.w	r2, r7, #32
 8001192:	4413      	add	r3, r2
 8001194:	2200      	movs	r2, #0
 8001196:	f803 2c08 	strb.w	r2, [r3, #-8]

            if(rele==1)
 800119a:	7ffb      	ldrb	r3, [r7, #31]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d105      	bne.n	80011ac <main+0x90>
                GPIOA->ODR ^= GPIO_Pin_12;
 80011a0:	4a43      	ldr	r2, [pc, #268]	; (80012b0 <main+0x194>)
 80011a2:	4b43      	ldr	r3, [pc, #268]	; (80012b0 <main+0x194>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80011aa:	60d3      	str	r3, [r2, #12]

            if(rele==2)
 80011ac:	7ffb      	ldrb	r3, [r7, #31]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d105      	bne.n	80011be <main+0xa2>
                GPIOA->ODR ^= GPIO_Pin_11;
 80011b2:	4a3f      	ldr	r2, [pc, #252]	; (80012b0 <main+0x194>)
 80011b4:	4b3e      	ldr	r3, [pc, #248]	; (80012b0 <main+0x194>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	f483 6300 	eor.w	r3, r3, #2048	; 0x800
 80011bc:	60d3      	str	r3, [r2, #12]

            if(rele==3)
 80011be:	7ffb      	ldrb	r3, [r7, #31]
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d105      	bne.n	80011d0 <main+0xb4>
                GPIOA->ODR ^= GPIO_Pin_10;
 80011c4:	4a3a      	ldr	r2, [pc, #232]	; (80012b0 <main+0x194>)
 80011c6:	4b3a      	ldr	r3, [pc, #232]	; (80012b0 <main+0x194>)
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 80011ce:	60d3      	str	r3, [r2, #12]

            if(rele==4)
 80011d0:	7ffb      	ldrb	r3, [r7, #31]
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d105      	bne.n	80011e2 <main+0xc6>
                GPIOA->ODR ^= GPIO_Pin_9;
 80011d6:	4a36      	ldr	r2, [pc, #216]	; (80012b0 <main+0x194>)
 80011d8:	4b35      	ldr	r3, [pc, #212]	; (80012b0 <main+0x194>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	f483 7300 	eor.w	r3, r3, #512	; 0x200
 80011e0:	60d3      	str	r3, [r2, #12]
            Delay(400);
 80011e2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80011e6:	f7ff ff2b 	bl	8001040 <Delay>
            //Output status of the relay
            sprintf(str, "Relay_%d", rele);
 80011ea:	7ffa      	ldrb	r2, [r7, #31]
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4931      	ldr	r1, [pc, #196]	; (80012b4 <main+0x198>)
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 fa56 	bl	80016a2 <siprintf>
            LCDI2C_write_String(str);
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fee8 	bl	8000fce <LCDI2C_write_String>
            if(stan[rele-1]==false)
 80011fe:	7ffb      	ldrb	r3, [r7, #31]
 8001200:	3b01      	subs	r3, #1
 8001202:	f107 0220 	add.w	r2, r7, #32
 8001206:	4413      	add	r3, r2
 8001208:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800120c:	f083 0301 	eor.w	r3, r3, #1
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <main+0x102>
                LCDI2C_write_String(" off");
 8001216:	4828      	ldr	r0, [pc, #160]	; (80012b8 <main+0x19c>)
 8001218:	f7ff fed9 	bl	8000fce <LCDI2C_write_String>
 800121c:	e002      	b.n	8001224 <main+0x108>
            else
                LCDI2C_write_String(" on");
 800121e:	4827      	ldr	r0, [pc, #156]	; (80012bc <main+0x1a0>)
 8001220:	f7ff fed5 	bl	8000fce <LCDI2C_write_String>
        }
//Encoder rotation
        if (encoder_status)
 8001224:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <main+0x1a4>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d08f      	beq.n	800114e <main+0x32>
        {
            encoder_status = NOREADY;
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <main+0x1a4>)
 8001230:	2200      	movs	r2, #0
 8001232:	701a      	strb	r2, [r3, #0]

            if (encoder_direction == FORWARD) {
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <main+0x1a8>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10a      	bne.n	8001254 <main+0x138>
                LCDI2C_clear();
 800123e:	f7ff fe0f 	bl	8000e60 <LCDI2C_clear>
                rele++;
 8001242:	7ffb      	ldrb	r3, [r7, #31]
 8001244:	3301      	adds	r3, #1
 8001246:	77fb      	strb	r3, [r7, #31]
                if(rele==5) rele=1;
 8001248:	7ffb      	ldrb	r3, [r7, #31]
 800124a:	2b05      	cmp	r3, #5
 800124c:	d10c      	bne.n	8001268 <main+0x14c>
 800124e:	2301      	movs	r3, #1
 8001250:	77fb      	strb	r3, [r7, #31]
 8001252:	e009      	b.n	8001268 <main+0x14c>

            }
            else {
                LCDI2C_clear();
 8001254:	f7ff fe04 	bl	8000e60 <LCDI2C_clear>
                rele--;
 8001258:	7ffb      	ldrb	r3, [r7, #31]
 800125a:	3b01      	subs	r3, #1
 800125c:	77fb      	strb	r3, [r7, #31]
                if(rele==0) rele=4;
 800125e:	7ffb      	ldrb	r3, [r7, #31]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <main+0x14c>
 8001264:	2304      	movs	r3, #4
 8001266:	77fb      	strb	r3, [r7, #31]

            }
            sprintf(str, "Relay_%d", rele);
 8001268:	7ffa      	ldrb	r2, [r7, #31]
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	4911      	ldr	r1, [pc, #68]	; (80012b4 <main+0x198>)
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fa17 	bl	80016a2 <siprintf>
            LCDI2C_write_String(str);
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fea9 	bl	8000fce <LCDI2C_write_String>
            if(stan[rele-1]==false)
 800127c:	7ffb      	ldrb	r3, [r7, #31]
 800127e:	3b01      	subs	r3, #1
 8001280:	f107 0220 	add.w	r2, r7, #32
 8001284:	4413      	add	r3, r2
 8001286:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800128a:	f083 0301 	eor.w	r3, r3, #1
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <main+0x180>
                LCDI2C_write_String(" off");
 8001294:	4808      	ldr	r0, [pc, #32]	; (80012b8 <main+0x19c>)
 8001296:	f7ff fe9a 	bl	8000fce <LCDI2C_write_String>
 800129a:	e002      	b.n	80012a2 <main+0x186>
            else
                LCDI2C_write_String(" on");
 800129c:	4807      	ldr	r0, [pc, #28]	; (80012bc <main+0x1a0>)
 800129e:	f7ff fe96 	bl	8000fce <LCDI2C_write_String>
            Delay(500);
 80012a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a6:	f7ff fecb 	bl	8001040 <Delay>
        if (GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_5) == 0)	//Checking the encoder click
 80012aa:	e750      	b.n	800114e <main+0x32>
 80012ac:	08001730 	.word	0x08001730
 80012b0:	40010800 	.word	0x40010800
 80012b4:	0800173c 	.word	0x0800173c
 80012b8:	08001748 	.word	0x08001748
 80012bc:	08001750 	.word	0x08001750
 80012c0:	20000014 	.word	0x20000014
 80012c4:	20000034 	.word	0x20000034

080012c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001300 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012ce:	e003      	b.n	80012d8 <LoopCopyDataInit>

080012d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80012d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012d6:	3104      	adds	r1, #4

080012d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012d8:	480b      	ldr	r0, [pc, #44]	; (8001308 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80012dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012e0:	d3f6      	bcc.n	80012d0 <CopyDataInit>
	ldr	r2, =_sbss
 80012e2:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80012e4:	e002      	b.n	80012ec <LoopFillZerobss>

080012e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012e8:	f842 3b04 	str.w	r3, [r2], #4

080012ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80012ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012f0:	d3f9      	bcc.n	80012e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012f2:	f000 f83d 	bl	8001370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f6:	f000 f9eb 	bl	80016d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012fa:	f7ff ff0f 	bl	800111c <main>
	bx	lr
 80012fe:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001300:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001304:	0800175c 	.word	0x0800175c
	ldr	r0, =_sdata
 8001308:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800130c:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8001310:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8001314:	20000054 	.word	0x20000054

08001318 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001318:	e7fe      	b.n	8001318 <ADC1_2_IRQHandler>

0800131a <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800132a:	e7fe      	b.n	800132a <HardFault_Handler+0x4>

0800132c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001330:	e7fe      	b.n	8001330 <MemManage_Handler+0x4>

08001332 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001336:	e7fe      	b.n	8001336 <BusFault_Handler+0x4>

08001338 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800133c:	e7fe      	b.n	800133c <UsageFault_Handler+0x4>

0800133e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr

08001356 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
	...

08001370 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001374:	4a15      	ldr	r2, [pc, #84]	; (80013cc <SystemInit+0x5c>)
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <SystemInit+0x5c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001380:	4912      	ldr	r1, [pc, #72]	; (80013cc <SystemInit+0x5c>)
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <SystemInit+0x5c>)
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <SystemInit+0x60>)
 8001388:	4013      	ands	r3, r2
 800138a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800138c:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <SystemInit+0x5c>)
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <SystemInit+0x5c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800139a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800139c:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <SystemInit+0x5c>)
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <SystemInit+0x5c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80013a8:	4a08      	ldr	r2, [pc, #32]	; (80013cc <SystemInit+0x5c>)
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <SystemInit+0x5c>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80013b2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <SystemInit+0x5c>)
 80013b6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80013ba:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80013bc:	f000 f80c 	bl	80013d8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <SystemInit+0x64>)
 80013c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013c6:	609a      	str	r2, [r3, #8]
#endif 
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021000 	.word	0x40021000
 80013d0:	f8ff0000 	.word	0xf8ff0000
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80013dc:	f000 f802 	bl	80013e4 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	2300      	movs	r3, #0
 80013f0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80013f2:	4a3a      	ldr	r2, [pc, #232]	; (80014dc <SetSysClockTo72+0xf8>)
 80013f4:	4b39      	ldr	r3, [pc, #228]	; (80014dc <SetSysClockTo72+0xf8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80013fe:	4b37      	ldr	r3, [pc, #220]	; (80014dc <SetSysClockTo72+0xf8>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3301      	adds	r3, #1
 800140c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d103      	bne.n	800141c <SetSysClockTo72+0x38>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800141a:	d1f0      	bne.n	80013fe <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800141c:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <SetSysClockTo72+0xf8>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d002      	beq.n	800142e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001428:	2301      	movs	r3, #1
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	e001      	b.n	8001432 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d14b      	bne.n	80014d0 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001438:	4a29      	ldr	r2, [pc, #164]	; (80014e0 <SetSysClockTo72+0xfc>)
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <SetSysClockTo72+0xfc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f043 0310 	orr.w	r3, r3, #16
 8001442:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001444:	4a26      	ldr	r2, [pc, #152]	; (80014e0 <SetSysClockTo72+0xfc>)
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <SetSysClockTo72+0xfc>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 0303 	bic.w	r3, r3, #3
 800144e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001450:	4a23      	ldr	r2, [pc, #140]	; (80014e0 <SetSysClockTo72+0xfc>)
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <SetSysClockTo72+0xfc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800145c:	4a1f      	ldr	r2, [pc, #124]	; (80014dc <SetSysClockTo72+0xf8>)
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <SetSysClockTo72+0xf8>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001464:	4a1d      	ldr	r2, [pc, #116]	; (80014dc <SetSysClockTo72+0xf8>)
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <SetSysClockTo72+0xf8>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800146c:	4a1b      	ldr	r2, [pc, #108]	; (80014dc <SetSysClockTo72+0xf8>)
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <SetSysClockTo72+0xf8>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001476:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001478:	4a18      	ldr	r2, [pc, #96]	; (80014dc <SetSysClockTo72+0xf8>)
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <SetSysClockTo72+0xf8>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001482:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001484:	4a15      	ldr	r2, [pc, #84]	; (80014dc <SetSysClockTo72+0xf8>)
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <SetSysClockTo72+0xf8>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800148e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001490:	4a12      	ldr	r2, [pc, #72]	; (80014dc <SetSysClockTo72+0xf8>)
 8001492:	4b12      	ldr	r3, [pc, #72]	; (80014dc <SetSysClockTo72+0xf8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800149a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800149c:	bf00      	nop
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <SetSysClockTo72+0xf8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f9      	beq.n	800149e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80014aa:	4a0c      	ldr	r2, [pc, #48]	; (80014dc <SetSysClockTo72+0xf8>)
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <SetSysClockTo72+0xf8>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f023 0303 	bic.w	r3, r3, #3
 80014b4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80014b6:	4a09      	ldr	r2, [pc, #36]	; (80014dc <SetSysClockTo72+0xf8>)
 80014b8:	4b08      	ldr	r3, [pc, #32]	; (80014dc <SetSysClockTo72+0xf8>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80014c2:	bf00      	nop
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <SetSysClockTo72+0xf8>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d1f9      	bne.n	80014c4 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40022000 	.word	0x40022000

080014e4 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
	int div = 1;
 80014f0:	2301      	movs	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80014f4:	e004      	b.n	8001500 <ts_itoa+0x1c>
		div *= base;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	fbb2 f2f3 	udiv	r2, r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	429a      	cmp	r2, r3
 800150c:	d2f3      	bcs.n	80014f6 <ts_itoa+0x12>

	while (div != 0)
 800150e:	e029      	b.n	8001564 <ts_itoa+0x80>
	{
		int num = d/div;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	fbb2 f3f3 	udiv	r3, r2, r3
 8001518:	613b      	str	r3, [r7, #16]
		d = d%div;
 800151a:	697a      	ldr	r2, [r7, #20]
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001522:	fb02 f201 	mul.w	r2, r2, r1
 8001526:	1a9b      	subs	r3, r3, r2
 8001528:	60bb      	str	r3, [r7, #8]
		div /= base;
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	2b09      	cmp	r3, #9
 8001538:	dd0a      	ble.n	8001550 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	1c59      	adds	r1, r3, #1
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	6011      	str	r1, [r2, #0]
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	b2d2      	uxtb	r2, r2
 8001548:	3237      	adds	r2, #55	; 0x37
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	e009      	b.n	8001564 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	1c59      	adds	r1, r3, #1
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	6011      	str	r1, [r2, #0]
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	3230      	adds	r2, #48	; 0x30
 8001560:	b2d2      	uxtb	r2, r2
 8001562:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1d2      	bne.n	8001510 <ts_itoa+0x2c>
	}
}
 800156a:	bf00      	nop
 800156c:	371c      	adds	r7, #28
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr

08001574 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8001584:	e07d      	b.n	8001682 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b25      	cmp	r3, #37	; 0x25
 800158c:	d171      	bne.n	8001672 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	3301      	adds	r3, #1
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b64      	cmp	r3, #100	; 0x64
 800159a:	d01e      	beq.n	80015da <ts_formatstring+0x66>
 800159c:	2b64      	cmp	r3, #100	; 0x64
 800159e:	dc06      	bgt.n	80015ae <ts_formatstring+0x3a>
 80015a0:	2b58      	cmp	r3, #88	; 0x58
 80015a2:	d050      	beq.n	8001646 <ts_formatstring+0xd2>
 80015a4:	2b63      	cmp	r3, #99	; 0x63
 80015a6:	d00e      	beq.n	80015c6 <ts_formatstring+0x52>
 80015a8:	2b25      	cmp	r3, #37	; 0x25
 80015aa:	d058      	beq.n	800165e <ts_formatstring+0xea>
 80015ac:	e05d      	b.n	800166a <ts_formatstring+0xf6>
 80015ae:	2b73      	cmp	r3, #115	; 0x73
 80015b0:	d02b      	beq.n	800160a <ts_formatstring+0x96>
 80015b2:	2b73      	cmp	r3, #115	; 0x73
 80015b4:	dc02      	bgt.n	80015bc <ts_formatstring+0x48>
 80015b6:	2b69      	cmp	r3, #105	; 0x69
 80015b8:	d00f      	beq.n	80015da <ts_formatstring+0x66>
 80015ba:	e056      	b.n	800166a <ts_formatstring+0xf6>
 80015bc:	2b75      	cmp	r3, #117	; 0x75
 80015be:	d037      	beq.n	8001630 <ts_formatstring+0xbc>
 80015c0:	2b78      	cmp	r3, #120	; 0x78
 80015c2:	d040      	beq.n	8001646 <ts_formatstring+0xd2>
 80015c4:	e051      	b.n	800166a <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	60fa      	str	r2, [r7, #12]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	1d11      	adds	r1, r2, #4
 80015d0:	6079      	str	r1, [r7, #4]
 80015d2:	6812      	ldr	r2, [r2, #0]
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	701a      	strb	r2, [r3, #0]
				break;
 80015d8:	e047      	b.n	800166a <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	1d1a      	adds	r2, r3, #4
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	da07      	bge.n	80015fa <ts_formatstring+0x86>
					{
						val *= -1;
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	425b      	negs	r3, r3
 80015ee:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	60fa      	str	r2, [r7, #12]
 80015f6:	222d      	movs	r2, #45	; 0x2d
 80015f8:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80015fa:	69f9      	ldr	r1, [r7, #28]
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	220a      	movs	r2, #10
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff6e 	bl	80014e4 <ts_itoa>
				}
				break;
 8001608:	e02f      	b.n	800166a <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	1d1a      	adds	r2, r3, #4
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8001614:	e007      	b.n	8001626 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	60fa      	str	r2, [r7, #12]
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	1c51      	adds	r1, r2, #1
 8001620:	61b9      	str	r1, [r7, #24]
 8001622:	7812      	ldrb	r2, [r2, #0]
 8001624:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f3      	bne.n	8001616 <ts_formatstring+0xa2>
					}
				}
				break;
 800162e:	e01c      	b.n	800166a <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	1d1a      	adds	r2, r3, #4
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	6819      	ldr	r1, [r3, #0]
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	220a      	movs	r2, #10
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff50 	bl	80014e4 <ts_itoa>
				break;
 8001644:	e011      	b.n	800166a <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	1d1a      	adds	r2, r3, #4
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4619      	mov	r1, r3
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	2210      	movs	r2, #16
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ff44 	bl	80014e4 <ts_itoa>
				break;
 800165c:	e005      	b.n	800166a <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	60fa      	str	r2, [r7, #12]
 8001664:	2225      	movs	r2, #37	; 0x25
 8001666:	701a      	strb	r2, [r3, #0]
				  break;
 8001668:	bf00      	nop
			}
			fmt++;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	3301      	adds	r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	e007      	b.n	8001682 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1c5a      	adds	r2, r3, #1
 8001676:	60fa      	str	r2, [r7, #12]
 8001678:	68ba      	ldr	r2, [r7, #8]
 800167a:	1c51      	adds	r1, r2, #1
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	7812      	ldrb	r2, [r2, #0]
 8001680:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	f47f af7d 	bne.w	8001586 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	461a      	mov	r2, r3
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	1ad3      	subs	r3, r2, r3
}
 800169a:	4618      	mov	r0, r3
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 80016a2:	b40e      	push	{r1, r2, r3}
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 80016ac:	f107 0320 	add.w	r3, r7, #32
 80016b0:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	69f9      	ldr	r1, [r7, #28]
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff ff5c 	bl	8001574 <ts_formatstring>
 80016bc:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016ca:	b003      	add	sp, #12
 80016cc:	4770      	bx	lr
	...

080016d0 <__libc_init_array>:
 80016d0:	b570      	push	{r4, r5, r6, lr}
 80016d2:	2500      	movs	r5, #0
 80016d4:	4e0c      	ldr	r6, [pc, #48]	; (8001708 <__libc_init_array+0x38>)
 80016d6:	4c0d      	ldr	r4, [pc, #52]	; (800170c <__libc_init_array+0x3c>)
 80016d8:	1ba4      	subs	r4, r4, r6
 80016da:	10a4      	asrs	r4, r4, #2
 80016dc:	42a5      	cmp	r5, r4
 80016de:	d109      	bne.n	80016f4 <__libc_init_array+0x24>
 80016e0:	f000 f81a 	bl	8001718 <_init>
 80016e4:	2500      	movs	r5, #0
 80016e6:	4e0a      	ldr	r6, [pc, #40]	; (8001710 <__libc_init_array+0x40>)
 80016e8:	4c0a      	ldr	r4, [pc, #40]	; (8001714 <__libc_init_array+0x44>)
 80016ea:	1ba4      	subs	r4, r4, r6
 80016ec:	10a4      	asrs	r4, r4, #2
 80016ee:	42a5      	cmp	r5, r4
 80016f0:	d105      	bne.n	80016fe <__libc_init_array+0x2e>
 80016f2:	bd70      	pop	{r4, r5, r6, pc}
 80016f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016f8:	4798      	blx	r3
 80016fa:	3501      	adds	r5, #1
 80016fc:	e7ee      	b.n	80016dc <__libc_init_array+0xc>
 80016fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001702:	4798      	blx	r3
 8001704:	3501      	adds	r5, #1
 8001706:	e7f2      	b.n	80016ee <__libc_init_array+0x1e>
 8001708:	08001754 	.word	0x08001754
 800170c:	08001754 	.word	0x08001754
 8001710:	08001754 	.word	0x08001754
 8001714:	08001758 	.word	0x08001758

08001718 <_init>:
 8001718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171a:	bf00      	nop
 800171c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800171e:	bc08      	pop	{r3}
 8001720:	469e      	mov	lr, r3
 8001722:	4770      	bx	lr

08001724 <_fini>:
 8001724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001726:	bf00      	nop
 8001728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800172a:	bc08      	pop	{r3}
 800172c:	469e      	mov	lr, r3
 800172e:	4770      	bx	lr
